----------------- Testing Card: Village ----------------
RANDOM TESTS.

ALL TESTS PASSED: Testing complete Village

Number of successes: 4000
Number of failures: 0

Function 'villageCard'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'mineCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'council_roomCard'
Lines executed:100.00% of 9
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'adventurerCard'
Lines executed:93.33% of 15
Branches executed:83.33% of 12
Taken at least once:66.67% of 12
Calls executed:50.00% of 2

Function 'smithyCard'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:20.30% of 197
Branches executed:26.06% of 165
Taken at least once:11.52% of 165
Calls executed:29.09% of 55

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:88.89% of 9
Branches executed:83.33% of 12
Taken at least once:75.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:41.94% of 558
Branches executed:43.41% of 417
Taken at least once:33.09% of 417
Calls executed:34.74% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos);
        -:    9:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z, int cardDrawn);
        -:   10:int council_roomCard(int i, int handPos, int currentPlayer, struct gameState *state);
        -:   11:int mineCard(int j, struct gameState *state, int currentPlayer, int i, int choice1, int choice2, int handPos);
        -:   12:int villageCard(int currentPlayer, struct gameState *state, int handPos);
        -:   13:
function compare called 120900 returned 100% blocks executed 83%
   120900:   14:int compare(const void* a, const void* b) {
   120900:   15:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   16:    return 1;
   120900:   17:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    32240:   18:    return -1;
    88660:   19:  return 0;
        -:   20:}
        -:   21:
function newGame called 0 returned 0% blocks executed 0%
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
function initializeGame called 4030 returned 100% blocks executed 88%
     4030:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;
        -:   49:  //set up random number generator
     4030:   50:  SelectStream(1);
call    0 returned 100%
     4030:   51:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   52:
        -:   53:  //check number of players
     4030:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
     4030:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    44330:   63:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
   443300:   65:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   66:        {
   403000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
     4030:   79:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:    {
     4030:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    #####:   83:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
     4030:   93:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   94:    {
     4030:   95:      state->supplyCount[estate] = 8;
     4030:   96:      state->supplyCount[duchy] = 8;
     4030:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
     4030:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4030:  108:  state->supplyCount[silver] = 40;
     4030:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    84630:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  113:    {
   664950:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  115:	{
   624650:  116:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
    40300:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  120:		{
    16120:  121:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     8060:  122:		    state->supplyCount[i] = 8;
        -:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
    32240:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
    40300:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
   584350:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
    12090:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:    {
     8060:  146:      state->deckCount[i] = 0;
    32240:  147:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:	{
    24180:  149:	  state->deck[i][j] = estate;
    24180:  150:	  state->deckCount[i]++;
        -:  151:	}
    64480:  152:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:	{
    56420:  154:	  state->deck[i][j] = copper;
    56420:  155:	  state->deckCount[i]++;
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
    12090:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:    {
     8060:  162:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
    12090:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:    {
        -:  171:      //initialize hand size to zero
     8060:  172:      state->handCount[i] = 0;
     8060:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
   112840:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:    {
   108810:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
     4030:  188:  state->outpostPlayed = 0;
     4030:  189:  state->phase = 0;
     4030:  190:  state->numActions = 1;
     4030:  191:  state->numBuys = 1;
     4030:  192:  state->playedCardCount = 0;
     4030:  193:  state->whoseTurn = 0;
     4030:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
    24180:  198:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20150:  199:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  200:  }
        -:  201:
     4030:  202:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  203:
     4030:  204:  return 0;
        -:  205:}
        -:  206:
function shuffle called 8063 returned 100% blocks executed 100%
     8063:  207:int shuffle(int player, struct gameState *state) {
        -:  208:
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     8063:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     8063:  215:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3:  216:    return -1;
     8060:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    96720:  220:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    80600:  221:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    80600:  222:    newDeck[newDeckPos] = state->deck[player][card];
    80600:  223:    newDeckPos++;
   282100:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   201500:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    80600:  227:    state->deckCount[player]--;
        -:  228:  }
    88660:  229:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    80600:  230:    state->deck[player][i] = newDeck[i];
    80600:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
     8060:  234:  return 0;
        -:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  238:{
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
call    0 never executed
        -:  256:
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:
    #####:  275:  return 0;
        -:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  304:
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:
    #####:  314:  return 0;
        -:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  319:}
        -:  320:
function handCard called 0 returned 0% blocks executed 0%
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 12018 returned 100% blocks executed 100%
    12018:  326:int supplyCount(int card, struct gameState *state) {
    12018:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 4 returned 100% blocks executed 82%
        4:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
        4:  332:  int count = 0;
        -:  333:
       34:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  335:    {
       30:  336:      if (state->deck[player][i] == card) count++;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  337:    }
        -:  338:
       14:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  340:    {
       10:  341:      if (state->hand[player][i] == card) count++;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  342:    }
        -:  343:
        4:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  347:    }
        -:  348:
        4:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 4008 returned 100% blocks executed 100%
     4008:  352:int whoseTurn(struct gameState *state) {
     4008:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  360:
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 32182 returned 100% blocks executed 85%
    32182:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
    32182:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  535:
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
        3:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        3:  544:    state->deckCount[player] = state->discardCount[player];
        3:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        3:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  549:
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:
        3:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        3:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:
        3:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        3:  565:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
    32179:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
    32179:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
    32179:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    32179:  582:    state->deckCount[player]--;
    32179:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
    32179:  586:  return 0;
        -:  587:}
        -:  588:
function getCost called 33 returned 100% blocks executed 100%
       33:  589:int getCost(int cardNumber)
        -:  590:{
       33:  591:  switch( cardNumber )
branch  0 taken 9%
branch  1 taken 9%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 6%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 3%
        -:  592:    {
        -:  593:    case curse:
        3:  594:      return 0;
        -:  595:    case estate:
        3:  596:      return 2;
        -:  597:    case duchy:
        1:  598:      return 5;
        -:  599:    case province:
        1:  600:      return 8;
        -:  601:    case copper:
        2:  602:      return 0;
        -:  603:    case silver:
        1:  604:      return 3;
        -:  605:    case gold:
        1:  606:      return 6;
        -:  607:    case adventurer:
        1:  608:      return 6;
        -:  609:    case council_room:
        1:  610:      return 5;
        -:  611:    case feast:
        1:  612:      return 4;
        -:  613:    case gardens:
        1:  614:      return 4;
        -:  615:    case mine:
        1:  616:      return 5;
        -:  617:    case remodel:
        1:  618:      return 4;
        -:  619:    case smithy:
        1:  620:      return 4;
        -:  621:    case village:
        1:  622:      return 3;
        -:  623:    case baron:
        1:  624:      return 4;
        -:  625:    case great_hall:
        1:  626:      return 3;
        -:  627:    case minion:
        1:  628:      return 5;
        -:  629:    case steward:
        1:  630:      return 3;
        -:  631:    case tribute:
        1:  632:      return 5;
        -:  633:    case ambassador:
        1:  634:      return 3;
        -:  635:    case cutpurse:
        1:  636:      return 4;
        -:  637:    case embargo:
        1:  638:      return 2;
        -:  639:    case outpost:
        1:  640:      return 5;
        -:  641:    case salvager:
        1:  642:      return 4;
        -:  643:    case sea_hag:
        1:  644:      return 4;
        -:  645:    case treasure_map:
        1:  646:      return 4;
        -:  647:    }
        -:  648:
        1:  649:  return -1;
        -:  650:}
        -:  651:
function cardEffect called 4008 returned 100% blocks executed 19%
     4008:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     4008:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     4008:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     4008:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     4008:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     4008:  666:  int z = 0;// this is the counter for the temp hand
     4008:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:
        -:  671:
        -:  672:  //uses switch to select card and perform actions
     4008:  673:  switch( card )
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  674:    {
        -:  675:    case adventurer:
        2:  676:	adventurerCard(drawntreasure, state, currentPlayer, temphand, z, cardDrawn);
call    0 returned 100%
        -:  677:
        -:  678:    case council_room:
        2:  679:	council_roomCard(i, handPos, currentPlayer, state);
call    0 returned 100%
        -:  680:
        -:  681:    case feast:
        -:  682:      //gain card with cost up to 5
        -:  683:      //Backup hand
       25:  684:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       23:  685:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       23:  686:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  687:      }
        -:  688:      //Backup hand
        -:  689:
        -:  690:      //Update Coins for Buy
        2:  691:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        2:  692:      x = 1;//Condition to loop on
        6:  693:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2:  694:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  695:	  if (DEBUG)
        -:  696:	    printf("None of that card left, sorry!\n");
        -:  697:
        -:  698:	  if (DEBUG){
        -:  699:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  700:	  }
        -:  701:	}
        2:  702:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  703:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  707:	  }
        -:  708:	}
        -:  709:	else{
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:	  }
        -:  714:
        2:  715:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        2:  716:	  x = 0;//No more buying cards
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  720:	  }
        -:  721:
        -:  722:	}
        -:  723:      }
        -:  724:
        -:  725:      //Reset Hand
       25:  726:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       23:  727:	state->hand[currentPlayer][i] = temphand[i];
       23:  728:	temphand[i] = -1;
        -:  729:      }
        -:  730:      //Reset Hand
        -:  731:
        2:  732:      return 0;
        -:  733:
        -:  734:    case gardens:
    #####:  735:      return -1;
        -:  736:
        -:  737:    case mine:
    #####:  738:	mineCard(j, state, currentPlayer, i, choice1, choice2, handPos);
call    0 never executed
        -:  739:
        -:  740:    case remodel:
        2:  741:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  742:
        2:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
        2:  748:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  749:
        -:  750:      //discard card from hand
        2:  751:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  752:
        -:  753:      //discard trashed card
        2:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  759:	      break;
        -:  760:	    }
        -:  761:	}
        -:  762:
        -:  763:
        2:  764:      return 0;
        -:  765:
        -:  766:    case smithy:
     2002:  767:	smithyCard(i, currentPlayer, state, handPos);
call    0 returned 100%
        -:  768:
        -:  769:    case village:
     4004:  770:	villageCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  771:
        -:  772:    case baron:
     4004:  773:      state->numBuys++;//Increase buys by 1!
     4004:  774:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  775:	int p = 0;//Iterator for hand!
    #####:  776:	int card_not_discarded = 1;//Flag for discard set!
    #####:  777:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  778:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  779:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  780:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  781:	    state->discardCount[currentPlayer]++;
    #####:  782:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  783:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  784:	    }
    #####:  785:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  786:	    state->handCount[currentPlayer]--;
    #####:  787:	    card_not_discarded = 0;//Exit the loop
        -:  788:	  }
    #####:  789:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  790:	    if(DEBUG) {
        -:  791:	      printf("No estate cards in your hand, invalid choice\n");
        -:  792:	      printf("Must gain an estate if there are any\n");
        -:  793:	    }
    #####:  794:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  796:	      state->supplyCount[estate]--;//Decrement estates
    #####:  797:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:		isGameOver(state);
call    0 never executed
        -:  799:	      }
        -:  800:	    }
    #####:  801:	    card_not_discarded = 0;//Exit the loop
        -:  802:	  }
        -:  803:
        -:  804:	  else{
    #####:  805:	    p++;//Next card
        -:  806:	  }
        -:  807:	}
        -:  808:      }
        -:  809:
        -:  810:      else{
     4004:  811:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     4004:  812:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
     4004:  813:	  state->supplyCount[estate]--;//Decrement Estates
     4004:  814:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  815:	    isGameOver(state);
call    0 never executed
        -:  816:	  }
        -:  817:	}
        -:  818:      }
        -:  819:
        -:  820:
     4004:  821:      return 0;
        -:  822:
        -:  823:    case great_hall:
        -:  824:      //+1 Card
    #####:  825:      drawCard(currentPlayer, state);
call    0 never executed
        -:  826:
        -:  827:      //+1 Actions
    #####:  828:      state->numActions++;
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  832:      return 0;
        -:  833:
        -:  834:    case minion:
        -:  835:      //+1 action
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  840:
    #####:  841:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  842:	{
    #####:  843:	  state->coins = state->coins + 2;
        -:  844:	}
        -:  845:
    #####:  846:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //discard hand
    #####:  849:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  850:	    {
    #####:  851:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:	    }
        -:  853:
        -:  854:	  //draw 4
    #####:  855:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  858:	    }
        -:  859:
        -:  860:	  //other players discard hand and redraw if hand size > 4
    #####:  861:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  864:		{
    #####:  865:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  866:		    {
        -:  867:		      //discard hand
    #####:  868:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  871:			}
        -:  872:
        -:  873:		      //draw 4
    #####:  874:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  875:			{
    #####:  876:			  drawCard(i, state);
call    0 never executed
        -:  877:			}
        -:  878:		    }
        -:  879:		}
        -:  880:	    }
        -:  881:
        -:  882:	}
    #####:  883:      return 0;
        -:  884:
        -:  885:    case steward:
    #####:  886:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 cards
    #####:  889:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  891:	}
    #####:  892:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  893:	{
        -:  894:	  //+2 coins
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:      else
        -:  898:	{
        -:  899:	  //trash 2 cards in hand
    #####:  900:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  901:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  902:	}
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  906:      return 0;
        -:  907:
        -:  908:    case tribute:
    #####:  909:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  910:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  911:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  912:	  state->deckCount[nextPlayer]--;
        -:  913:	}
    #####:  914:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  915:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  916:	  state->discardCount[nextPlayer]--;
        -:  917:	}
        -:  918:	else{
        -:  919:	  //No Card to Reveal
        -:  920:	  if (DEBUG){
        -:  921:	    printf("No cards to reveal\n");
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:
        -:  926:      else{
    #####:  927:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  928:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  929:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  930:	    state->deckCount[nextPlayer]++;
    #####:  931:	    state->discard[nextPlayer][i] = -1;
    #####:  932:	    state->discardCount[nextPlayer]--;
        -:  933:	  }
        -:  934:
    #####:  935:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  936:	}
    #####:  937:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  939:	state->deckCount[nextPlayer]--;
    #####:  940:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
        -:  943:      }
        -:  944:
    #####:  945:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  946:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  947:	state->playedCardCount++;
    #####:  948:	tributeRevealedCards[1] = -1;
        -:  949:      }
        -:  950:
    #####:  951:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  952:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  953:	  state->coins += 2;
        -:  954:	}
        -:  955:
    #####:  956:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  957:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  958:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  959:	}
        -:  960:	else{//Action Card
    #####:  961:	  state->numActions = state->numActions + 2;
        -:  962:	}
        -:  963:      }
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case ambassador:
    #####:  968:      j = 0;		//used to check if player has enough cards to discard
        -:  969:
    #####:  970:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  971:	{
    #####:  972:	  return -1;
        -:  973:	}
        -:  974:
    #####:  975:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  return -1;
        -:  978:	}
        -:  979:
    #####:  980:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  981:	{
    #####:  982:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  983:	    {
    #####:  984:	      j++;
        -:  985:	    }
        -:  986:	}
    #####:  987:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  return -1;
        -:  990:	}
        -:  991:
        -:  992:      if (DEBUG)
        -:  993:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  994:
        -:  995:      //increase supply count for choosen card by amount being discarded
    #####:  996:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  997:
        -:  998:      //each other player gains a copy of revealed card
    #####:  999:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1004:	    }
        -: 1005:	}
        -: 1006:
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1009:
        -: 1010:      //trash copies of cards returned to supply
    #####: 1011:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
    #####: 1013:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	    {
    #####: 1015:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1016:		{
    #####: 1017:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1018:		  break;
        -: 1019:		}
        -: 1020:	    }
        -: 1021:	}
        -: 1022:
    #####: 1023:      return 0;
        -: 1024:
        -: 1025:    case cutpurse:
        -: 1026:
    #####: 1027:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:		{
    #####: 1034:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1037:		      break;
        -: 1038:		    }
    #####: 1039:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1040:		    {
    #####: 1041:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1042:			{
        -: 1043:			  if (DEBUG)
        -: 1044:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1045:			}
    #####: 1046:		      break;
        -: 1047:		    }
        -: 1048:		}
        -: 1049:
        -: 1050:	    }
        -: 1051:
        -: 1052:	}
        -: 1053:
        -: 1054:      //discard played card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1056:
    #####: 1057:      return 0;
        -: 1058:
        -: 1059:
        -: 1060:    case embargo:
        -: 1061:      //+2 Coins
    #####: 1062:      state->coins = state->coins + 2;
        -: 1063:
        -: 1064:      //see if selected pile is in play
    #####: 1065:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  return -1;
        -: 1068:	}
        -: 1069:
        -: 1070:      //add embargo token to selected supply pile
    #####: 1071:      state->embargoTokens[choice1]++;
        -: 1072:
        -: 1073:      //trash card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case outpost:
        -: 1078:      //set outpost flag
    #####: 1079:      state->outpostPlayed++;
        -: 1080:
        -: 1081:      //discard card
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1083:      return 0;
        -: 1084:
        -: 1085:    case salvager:
        -: 1086:      //+1 buy
    #####: 1087:      state->numBuys++;
        -: 1088:
    #####: 1089:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
        -: 1091:	  //gain coins equal to trashed card
    #####: 1092:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1093:	  //trash card
    #####: 1094:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1095:	}
        -: 1096:
        -: 1097:      //discard card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1099:      return 0;
        -: 1100:
        -: 1101:    case sea_hag:
    #####: 1102:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1103:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1104:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1105:	  state->discardCount[i]++;
    #####: 1106:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1107:	}
        -: 1108:      }
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:    case treasure_map:
        -: 1112:      //search hand for another treasure_map
    #####: 1113:      index = -1;
    #####: 1114:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1117:	    {
    #####: 1118:	      index = i;
    #####: 1119:	      break;
        -: 1120:	    }
        -: 1121:	}
    #####: 1122:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  //trash both treasure cards
    #####: 1125:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1126:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1127:
        -: 1128:	  //gain 4 Gold cards
    #####: 1129:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1132:	    }
        -: 1133:
        -: 1134:	  //return success
    #####: 1135:	  return 1;
        -: 1136:	}
        -: 1137:
        -: 1138:      //no second treasure_map found in hand
    #####: 1139:      return -1;
        -: 1140:    }
        -: 1141:
    #####: 1142:  return -1;
        -: 1143:}
        -: 1144:
function discardCard called 6030 returned 100% blocks executed 89%
     6030: 1145:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1146:{
        -: 1147:
        -: 1148:  //if card is not trashed, added to Played pile
     6030: 1149:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1150:    {
        -: 1151:      //add card to played pile
     4018: 1152:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4018: 1153:      state->playedCardCount++;
        -: 1154:    }
        -: 1155:
        -: 1156:  //set played card to -1
     6030: 1157:  state->hand[currentPlayer][handPos] = -1;
        -: 1158:
        -: 1159:  //remove card from player's hand
     6030: 1160:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
       19: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
     6011: 1165:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1166:    {
        -: 1167:      //reduce number of cards in hand
    #####: 1168:      state->handCount[currentPlayer]--;
        -: 1169:    }
        -: 1170:  else
        -: 1171:    {
        -: 1172:      //replace discarded card with last card in hand
     6011: 1173:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1174:      //set last card to -1
     6011: 1175:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1176:      //reduce number of cards in hand
     6011: 1177:      state->handCount[currentPlayer]--;
        -: 1178:    }
        -: 1179:
     6030: 1180:  return 0;
        -: 1181:}
        -: 1182:
function gainCard called 4008 returned 100% blocks executed 70%
     4008: 1183:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1184:{
        -: 1185:  //Note: supplyPos is enum of choosen card
        -: 1186:
        -: 1187:  //check if supply pile is empty (0) or card is not used in game (-1)
     4008: 1188:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1189:    {
    #####: 1190:      return -1;
        -: 1191:    }
        -: 1192:
        -: 1193:  //added card for [whoseTurn] current player:
        -: 1194:  // toFlag = 0 : add to discard
        -: 1195:  // toFlag = 1 : add to deck
        -: 1196:  // toFlag = 2 : add to hand
        -: 1197:
     4008: 1198:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1199:    {
    #####: 1200:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1201:      state->deckCount[player]++;
        -: 1202:    }
     4008: 1203:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1204:    {
    #####: 1205:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1206:      state->handCount[player]++;
        -: 1207:    }
        -: 1208:  else
        -: 1209:    {
     4008: 1210:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4008: 1211:      state->discardCount[player]++;
        -: 1212:    }
        -: 1213:
        -: 1214:  //decrease number in supply pile
     4008: 1215:  state->supplyCount[supplyPos]--;
        -: 1216:
     4008: 1217:  return 0;
        -: 1218:}
        -: 1219:
function updateCoins called 4032 returned 100% blocks executed 82%
     4032: 1220:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1221:{
        -: 1222:  int i;
        -: 1223:
        -: 1224:  //reset coin count
     4032: 1225:  state->coins = 0;
        -: 1226:
        -: 1227:  //add coins for each Treasure card in player's hand
    24203: 1228:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1229:    {
    20171: 1230:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1231:	{
    16120: 1232:	  state->coins += 1;
        -: 1233:	}
     4051: 1234:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1235:	{
    #####: 1236:	  state->coins += 2;
        -: 1237:	}
     4051: 1238:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1239:	{
    #####: 1240:	  state->coins += 3;
        -: 1241:	}
        -: 1242:    }
        -: 1243:
        -: 1244:  //add bonus
     4032: 1245:  state->coins += bonus;
        -: 1246:
     4032: 1247:  return 0;
        -: 1248:}
        -: 1249:
function smithyCard called 2002 returned 100% blocks executed 100%
     2002: 1250:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos){
        -: 1251:
        -: 1252:      //+3 Cards
    10010: 1253:      for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1254:	{
     8008: 1255:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1256:	}
        -: 1257:
        -: 1258:      //discard card from hand
     2002: 1259:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
     2002: 1260:      return 0;
        -: 1261:}
        -: 1262:
function adventurerCard called 2 returned 100% blocks executed 87%
        2: 1263:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z, int cardDrawn){
       10: 1264:      while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6: 1265:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1266:	  shuffle(currentPlayer, state);
call    0 never executed
        -: 1267:	}
        6: 1268:	drawCard(currentPlayer, state);
call    0 returned 100%
        6: 1269:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1270:	if (cardDrawn == copper || (cardDrawn == silver && cardDrawn == gold))
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        4: 1271:	  drawntreasure++;
        -: 1272:	else{
        2: 1273:	  temphand[z]=cardDrawn;
        2: 1274:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2: 1275:	  z++;
        -: 1276:	}
        -: 1277:      }
        6: 1278:      while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2: 1279:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2: 1280:	z=z-1;
        -: 1281:      }
        2: 1282:      return 0;
        -: 1283:}
        -: 1284:
function council_roomCard called 2 returned 100% blocks executed 100%
        2: 1285:int council_roomCard(int i, int handPos, int currentPlayer, struct gameState *state){
        -: 1286:      //+4 Cards
       12: 1287:      for (i = 0; i <= 4; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1288:	{
       10: 1289:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1290:	}
        -: 1291:
        -: 1292:      //+1 Buy
        2: 1293:      state->numBuys++;
        -: 1294:
        -: 1295:      //Each other player draws a card
        6: 1296:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1297:	{
        4: 1298:	  if ( i == currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1299:	    {
        2: 1300:	      drawCard(i, state);
call    0 returned 100%
        -: 1301:	    }
        -: 1302:	}
        -: 1303:
        -: 1304:      //put played card in played card pile
        2: 1305:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1306:
        2: 1307:      return 0;
        -: 1308:
        -: 1309:}
        -: 1310:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1311:int mineCard(int j, struct gameState *state, int currentPlayer, int i, int choice1, int choice2, int handPos){
    #####: 1312:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1313:
    #####: 1314:      if (state->hand[currentPlayer][choice1] > copper && state->hand[currentPlayer][choice1] < gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1315:	{
    #####: 1316:	  return -1;
        -: 1317:	}
        -: 1318:
    #####: 1319:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1320:	{
    #####: 1321:	  return -1;
        -: 1322:	}
        -: 1323:
    #####: 1324:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:
    #####: 1329:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1330:
        -: 1331:      //discard card from hand
    #####: 1332:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1333:
        -: 1334:      //discard trashed card
    #####: 1335:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:	{
    #####: 1337:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1338:	    {
    #####: 1339:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1340:	      break;
        -: 1341:	    }
        -: 1342:	}
        -: 1343:
    #####: 1344:      return 0;
        -: 1345:
        -: 1346:}
        -: 1347:
function villageCard called 4004 returned 100% blocks executed 100%
     4004: 1348:int villageCard(int currentPlayer, struct gameState *state, int handPos){
        -: 1349:      //+1 Card
     4004: 1350:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1351:
        -: 1352:      //+2 Actions
     4004: 1353:      state->numActions = state->numActions + 2;
        -: 1354:
        -: 1355:      //discard played card from hand
     4004: 1356:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4004: 1357:      return 0;
        -: 1358:}
        -: 1359:
        -: 1360://end of dominion.c
